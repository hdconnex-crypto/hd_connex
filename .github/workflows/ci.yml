name: CI
on:
  push:
    branches: [main]
  pull_request:
    branches: [main]

jobs:
  test:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        node-version: [18.x, 20.x, 22.x]

    steps:
      - uses: actions/checkout@v4

      # Detect app dir that contains package.json
      - name: Detect package directory
        id: pkg
        run: |
          set -e
          for d in . app nextjs_app hd_connex/app migration_package/nextjs_app preview_app/app; do
            if [ -f "$d/package.json" ]; then echo "PKG_DIR=$d" >> "$GITHUB_ENV"; exit 0; fi
          done
          echo "No package.json found"; exit 1

      - name: Enable Corepack (Yarn Berry support)
        run: corepack enable

      # Setup Node with Yarn cache if yarn.lock exists
      - name: Setup Node.js (Yarn cache)
        if: hashFiles(format('{0}/yarn.lock', env.PKG_DIR)) != ''
        uses: actions/setup-node@v4
        with:
          node-version: ${{ matrix.node-version }}
          cache: yarn
          cache-dependency-path: ${{ env.PKG_DIR }}/yarn.lock

      # Setup Node with npm cache if package-lock exists
      - name: Setup Node.js (npm cache)
        if: hashFiles(format('{0}/package-lock.json', env.PKG_DIR)) != ''
        uses: actions/setup-node@v4
        with:
          node-version: ${{ matrix.node-version }}
          cache: npm
          cache-dependency-path: ${{ env.PKG_DIR }}/package-lock.json

      # Fallback if no lockfile: no cache
      - name: Setup Node.js (no cache)
        if: >
          hashFiles(format('{0}/yarn.lock', env.PKG_DIR)) == '' &&
          hashFiles(format('{0}/package-lock.json', env.PKG_DIR)) == ''
        uses: actions/setup-node@v4
        with:
          node-version: ${{ matrix.node-version }}

      - name: Install dependencies
        working-directory: ${{ env.PKG_DIR }}
        run: |
          if [ -f yarn.lock ]; then
            yarn --frozen-lockfile
          elif [ -f package-lock.json ]; then
            npm ci
          else
            npm install --no-audit --no-fund
          fi

      - name: Cache Next.js build
        uses: actions/cache@v4
        with:
          path: ${{ env.PKG_DIR }}/.next/cache
          key: ${{ runner.os }}-nextjs-${{ hashFiles(format('{0}/yarn.lock', env.PKG_DIR), format('{0}/package-lock.json', env.PKG_DIR)) }}-${{ hashFiles(format('{0}/**/*.[jt]s', env.PKG_DIR), format('{0}/**/*.[jt]sx', env.PKG_DIR)) }}
          restore-keys: |
            ${{ runner.os }}-nextjs-${{ hashFiles(format('{0}/yarn.lock', env.PKG_DIR), format('{0}/package-lock.json', env.PKG_DIR)) }}-

      - name: Generate Prisma client
        working-directory: ${{ env.PKG_DIR }}
        run: npx prisma generate

      - name: Type check
        working-directory: ${{ env.PKG_DIR }}
        run: |
          if npm run | grep -q "^  typecheck"; then
            npm run typecheck
          else
            npx tsc --noEmit || echo "No TS or typecheck script; skipping"
          fi

      - name: Lint
        working-directory: ${{ env.PKG_DIR }}
        run: |
          if npm run | grep -q "^  lint"; then
            npm run lint
          else
            echo "No lint script; skipping"
          fi

      - name: Build
        working-directory: ${{ env.PKG_DIR }}
        env:
          DATABASE_URL: ${{ secrets.DATABASE_URL }}
          NEXTAUTH_SECRET: ${{ secrets.NEXTAUTH_SECRET }}
          NEXTAUTH_URL: http://localhost:3000
          NEXT_TELEMETRY_DISABLED: 1
        run: npm run build

      - name: Upload build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: build-artifacts-${{ matrix.node-version }}
          path: |
            ${{ env.PKG_DIR }}/.next/
            ${{ env.PKG_DIR }}/public/
